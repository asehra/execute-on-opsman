// This file was generated by counterfeiter
package clientfakes

import (
	"sync"

	"github.com/pivotal-cf-experimental/execute-on-opsman/client"
)

type FakeOpsManClient struct {
	DirectorManifestStub        func()
	directorManifestMutex       sync.RWMutex
	directorManifestArgsForCall []struct{}
	invocations                 map[string][][]interface{}
	invocationsMutex            sync.RWMutex
}

func (fake *FakeOpsManClient) DirectorManifest() {
	fake.directorManifestMutex.Lock()
	fake.directorManifestArgsForCall = append(fake.directorManifestArgsForCall, struct{}{})
	fake.recordInvocation("DirectorManifest", []interface{}{})
	fake.directorManifestMutex.Unlock()
	if fake.DirectorManifestStub != nil {
		fake.DirectorManifestStub()
	}
}

func (fake *FakeOpsManClient) DirectorManifestCallCount() int {
	fake.directorManifestMutex.RLock()
	defer fake.directorManifestMutex.RUnlock()
	return len(fake.directorManifestArgsForCall)
}

func (fake *FakeOpsManClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.directorManifestMutex.RLock()
	defer fake.directorManifestMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeOpsManClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.OpsManClient = new(FakeOpsManClient)
