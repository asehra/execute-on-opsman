// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf-experimental/execute-on-opsman/commands"
)

type SSHClient struct {
	ExecuteOnRemoteStub        func(input commands.ExecuteOnRemoteInput) error
	executeOnRemoteMutex       sync.RWMutex
	executeOnRemoteArgsForCall []struct {
		input commands.ExecuteOnRemoteInput
	}
	executeOnRemoteReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SSHClient) ExecuteOnRemote(input commands.ExecuteOnRemoteInput) error {
	fake.executeOnRemoteMutex.Lock()
	fake.executeOnRemoteArgsForCall = append(fake.executeOnRemoteArgsForCall, struct {
		input commands.ExecuteOnRemoteInput
	}{input})
	fake.recordInvocation("ExecuteOnRemote", []interface{}{input})
	fake.executeOnRemoteMutex.Unlock()
	if fake.ExecuteOnRemoteStub != nil {
		return fake.ExecuteOnRemoteStub(input)
	} else {
		return fake.executeOnRemoteReturns.result1
	}
}

func (fake *SSHClient) ExecuteOnRemoteCallCount() int {
	fake.executeOnRemoteMutex.RLock()
	defer fake.executeOnRemoteMutex.RUnlock()
	return len(fake.executeOnRemoteArgsForCall)
}

func (fake *SSHClient) ExecuteOnRemoteArgsForCall(i int) commands.ExecuteOnRemoteInput {
	fake.executeOnRemoteMutex.RLock()
	defer fake.executeOnRemoteMutex.RUnlock()
	return fake.executeOnRemoteArgsForCall[i].input
}

func (fake *SSHClient) ExecuteOnRemoteReturns(result1 error) {
	fake.ExecuteOnRemoteStub = nil
	fake.executeOnRemoteReturns = struct {
		result1 error
	}{result1}
}

func (fake *SSHClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeOnRemoteMutex.RLock()
	defer fake.executeOnRemoteMutex.RUnlock()
	return fake.invocations
}

func (fake *SSHClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.SSHClient = new(SSHClient)
